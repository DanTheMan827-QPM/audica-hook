#include "audica-hook/utils/il2cpp-functions.hpp"

#include <dlfcn.h>

#include "audica-hook/utils/logging.hpp"
#include "audica-hook/utils/utils.hpp"
#include "utils/export.hpp"

using namespace AudicaHook::Logging;

void* load_il2cpp(void* imagehandle, char const* name) {
    auto symbol = dlsym(imagehandle, name);

    if (auto err = dlerror()) {
        Logger.error("Failed to load {}: {}", name, err);
    } else {
        Logger.info("Loaded: {}", name);
    }

    return symbol;
}

#define GET_POINTER(name) (*(void**) (&name))
#define LOAD_IL2CPP(name) GET_POINTER(name) = load_il2cpp(imagehandle, "il2cpp_" #name);

// Autogenerated and modified by zoller27osu
// Initializes all of the IL2CPP functions via dlopen and dlsym for use.
HOOK_EXPORT void il2cpp_functions::Init() {
    if (initialized) {
        return;
    }
    Logger.info("il2cpp_functions: Init: Initializing all IL2CPP Functions...");
    dlerror();  // clears existing errors
    void* imagehandle = dlopen(AudicaHook::Utils::IL2CPP_SO_PATH, RTLD_GLOBAL | RTLD_LAZY);
    if (!imagehandle) {
        if (auto err = dlerror()) {
            Logger.error("Failed to dlopen {}: {}!", AudicaHook::Utils::IL2CPP_SO_PATH, err);
        } else {
            Logger.error("Failed to dlopen {}", AudicaHook::Utils::IL2CPP_SO_PATH);
        }
        return;
    }

    LOAD_IL2CPP(init);
    if (!GET_POINTER(init)) {
        return;
    }

    LOAD_IL2CPP(init_utf16);
    LOAD_IL2CPP(init_utf16);
    LOAD_IL2CPP(shutdown);
    LOAD_IL2CPP(set_config_dir);
    LOAD_IL2CPP(set_data_dir);
    LOAD_IL2CPP(set_temp_dir);
    LOAD_IL2CPP(set_commandline_arguments);
    LOAD_IL2CPP(set_commandline_arguments_utf16);
    LOAD_IL2CPP(set_config_utf16);
    LOAD_IL2CPP(set_config);
    LOAD_IL2CPP(set_memory_callbacks);
    LOAD_IL2CPP(get_corlib);
    LOAD_IL2CPP(add_internal_call);
    LOAD_IL2CPP(resolve_icall);
    LOAD_IL2CPP(alloc);
    LOAD_IL2CPP(free);
    LOAD_IL2CPP(array_class_get);
    LOAD_IL2CPP(array_length);
    LOAD_IL2CPP(array_get_byte_length);
    LOAD_IL2CPP(array_new);
    LOAD_IL2CPP(array_new_specific);
    LOAD_IL2CPP(array_new_full);
    LOAD_IL2CPP(bounded_array_class_get);
    LOAD_IL2CPP(array_element_size);
    LOAD_IL2CPP(assembly_get_image);
    LOAD_IL2CPP(class_enum_basetype);
    LOAD_IL2CPP(class_is_generic);
    LOAD_IL2CPP(class_is_inflated);
    LOAD_IL2CPP(class_is_assignable_from);
    LOAD_IL2CPP(class_is_subclass_of);
    LOAD_IL2CPP(class_has_parent);
    LOAD_IL2CPP(class_from_il2cpp_type);
    LOAD_IL2CPP(class_from_name);
    LOAD_IL2CPP(class_from_system_type);
    LOAD_IL2CPP(class_get_element_class);
    LOAD_IL2CPP(class_get_events);
    LOAD_IL2CPP(class_get_fields);
    LOAD_IL2CPP(class_get_nested_types);
    LOAD_IL2CPP(class_get_interfaces);
    LOAD_IL2CPP(class_get_properties);
    LOAD_IL2CPP(class_get_property_from_name);
    LOAD_IL2CPP(class_get_field_from_name);
    LOAD_IL2CPP(class_get_methods);
    LOAD_IL2CPP(class_get_method_from_name);
    LOAD_IL2CPP(class_get_name);
    LOAD_IL2CPP(class_get_namespace);
    LOAD_IL2CPP(class_get_parent);
    LOAD_IL2CPP(class_get_declaring_type);
    LOAD_IL2CPP(class_instance_size);
    LOAD_IL2CPP(class_num_fields);
    LOAD_IL2CPP(class_is_valuetype);
    LOAD_IL2CPP(class_value_size);
    LOAD_IL2CPP(class_is_blittable);
    LOAD_IL2CPP(class_get_flags);
    LOAD_IL2CPP(class_is_abstract);
    LOAD_IL2CPP(class_is_interface);
    LOAD_IL2CPP(class_array_element_size);
    LOAD_IL2CPP(class_from_type);
    LOAD_IL2CPP(class_get_type);
    LOAD_IL2CPP(class_get_type_token);
    LOAD_IL2CPP(class_has_attribute);
    LOAD_IL2CPP(class_has_references);
    LOAD_IL2CPP(class_is_enum);
    LOAD_IL2CPP(class_get_image);
    LOAD_IL2CPP(class_get_assemblyname);
    LOAD_IL2CPP(class_get_rank);
    LOAD_IL2CPP(class_get_bitmap_size);
    LOAD_IL2CPP(class_get_bitmap);
    LOAD_IL2CPP(stats_dump_to_file);
    LOAD_IL2CPP(stats_get_value);
    LOAD_IL2CPP(domain_get);
    LOAD_IL2CPP(domain_assembly_open);
    LOAD_IL2CPP(domain_get_assemblies);
    LOAD_IL2CPP(exception_from_name_msg);
    LOAD_IL2CPP(get_exception_argument_null);
    LOAD_IL2CPP(format_exception);
    LOAD_IL2CPP(format_stack_trace);
    LOAD_IL2CPP(unhandled_exception);
    LOAD_IL2CPP(field_get_flags);
    LOAD_IL2CPP(field_get_name);
    LOAD_IL2CPP(field_get_parent);
    LOAD_IL2CPP(field_get_offset);
    LOAD_IL2CPP(field_get_type);
    LOAD_IL2CPP(field_get_value);
    LOAD_IL2CPP(field_get_value_object);
    LOAD_IL2CPP(field_has_attribute);
    LOAD_IL2CPP(field_set_value);
    LOAD_IL2CPP(field_static_get_value);
    LOAD_IL2CPP(field_static_set_value);
    LOAD_IL2CPP(field_set_value_object);
    LOAD_IL2CPP(gc_collect);
    LOAD_IL2CPP(gc_collect_a_little);
    LOAD_IL2CPP(gc_disable);
    LOAD_IL2CPP(gc_enable);
    LOAD_IL2CPP(gc_is_disabled);
    LOAD_IL2CPP(gc_get_used_size);
    LOAD_IL2CPP(gc_get_heap_size);
    LOAD_IL2CPP(gc_wbarrier_set_field);
    LOAD_IL2CPP(gchandle_new);
    LOAD_IL2CPP(gchandle_new_weakref);
    LOAD_IL2CPP(gchandle_get_target);
    LOAD_IL2CPP(gchandle_free);
    LOAD_IL2CPP(unity_liveness_calculation_begin);
    LOAD_IL2CPP(unity_liveness_calculation_end);
    LOAD_IL2CPP(unity_liveness_calculation_from_root);
    LOAD_IL2CPP(unity_liveness_calculation_from_statics);
    LOAD_IL2CPP(method_get_return_type);
    LOAD_IL2CPP(method_get_declaring_type);
    LOAD_IL2CPP(method_get_name);
    LOAD_IL2CPP(method_get_from_reflection);
    LOAD_IL2CPP(method_get_object);
    LOAD_IL2CPP(method_is_generic);
    LOAD_IL2CPP(method_is_inflated);
    LOAD_IL2CPP(method_is_instance);
    LOAD_IL2CPP(method_get_param_count);
    LOAD_IL2CPP(method_get_param);
    LOAD_IL2CPP(method_get_class);
    LOAD_IL2CPP(method_has_attribute);
    LOAD_IL2CPP(method_get_flags);
    LOAD_IL2CPP(method_get_token);
    LOAD_IL2CPP(method_get_param_name);
    LOAD_IL2CPP(profiler_install);
    LOAD_IL2CPP(profiler_set_events);
    LOAD_IL2CPP(profiler_install_enter_leave);
    LOAD_IL2CPP(profiler_install_allocation);
    LOAD_IL2CPP(profiler_install_gc);
    LOAD_IL2CPP(profiler_install_fileio);
    LOAD_IL2CPP(profiler_install_thread);
    LOAD_IL2CPP(property_get_flags);
    LOAD_IL2CPP(property_get_get_method);
    LOAD_IL2CPP(property_get_set_method);
    LOAD_IL2CPP(property_get_name);
    LOAD_IL2CPP(property_get_parent);
    LOAD_IL2CPP(object_get_class);
    LOAD_IL2CPP(object_get_size);
    LOAD_IL2CPP(object_get_virtual_method);
    LOAD_IL2CPP(object_new);
    LOAD_IL2CPP(object_unbox);
    LOAD_IL2CPP(value_box);
    LOAD_IL2CPP(monitor_enter);
    LOAD_IL2CPP(monitor_try_enter);
    LOAD_IL2CPP(monitor_exit);
    LOAD_IL2CPP(monitor_pulse);
    LOAD_IL2CPP(monitor_pulse_all);
    LOAD_IL2CPP(monitor_wait);
    LOAD_IL2CPP(monitor_try_wait);
    LOAD_IL2CPP(runtime_invoke);
    LOAD_IL2CPP(runtime_invoke_convert_args);
    LOAD_IL2CPP(runtime_class_init);
    LOAD_IL2CPP(runtime_object_init);
    LOAD_IL2CPP(runtime_object_init_exception);
    LOAD_IL2CPP(runtime_unhandled_exception_policy_set);
    LOAD_IL2CPP(string_length);
    LOAD_IL2CPP(string_chars);
    LOAD_IL2CPP(string_new);
    LOAD_IL2CPP(string_new_len);
    LOAD_IL2CPP(string_new_utf16);
    LOAD_IL2CPP(string_new_wrapper);
    LOAD_IL2CPP(string_intern);
    LOAD_IL2CPP(string_is_interned);
    LOAD_IL2CPP(thread_current);
    LOAD_IL2CPP(thread_attach);
    LOAD_IL2CPP(thread_detach);
    LOAD_IL2CPP(thread_get_all_attached_threads);
    LOAD_IL2CPP(is_vm_thread);
    LOAD_IL2CPP(current_thread_walk_frame_stack);
    LOAD_IL2CPP(thread_walk_frame_stack);
    LOAD_IL2CPP(current_thread_get_top_frame);
    LOAD_IL2CPP(thread_get_top_frame);
    LOAD_IL2CPP(current_thread_get_frame_at);
    LOAD_IL2CPP(thread_get_frame_at);
    LOAD_IL2CPP(current_thread_get_stack_depth);
    LOAD_IL2CPP(thread_get_stack_depth);
    LOAD_IL2CPP(type_get_object);
    LOAD_IL2CPP(type_get_type);
    LOAD_IL2CPP(type_get_class_or_element_class);
    LOAD_IL2CPP(type_get_name);
    LOAD_IL2CPP(type_is_byref);
    LOAD_IL2CPP(type_get_attrs);
    LOAD_IL2CPP(type_equals);
    LOAD_IL2CPP(type_get_assembly_qualified_name);
    LOAD_IL2CPP(image_get_assembly);
    LOAD_IL2CPP(image_get_name);
    LOAD_IL2CPP(image_get_filename);
    LOAD_IL2CPP(image_get_entry_point);
    LOAD_IL2CPP(image_get_class_count);
    LOAD_IL2CPP(image_get_class);
    LOAD_IL2CPP(capture_memory_snapshot);
    LOAD_IL2CPP(free_captured_memory_snapshot);
    LOAD_IL2CPP(set_find_plugin_callback);
    LOAD_IL2CPP(register_log_callback);
    LOAD_IL2CPP(debugger_set_agent_options);
    LOAD_IL2CPP(is_debugger_attached);
    LOAD_IL2CPP(unity_install_unitytls_interface);
    LOAD_IL2CPP(custom_attrs_from_class);
    LOAD_IL2CPP(custom_attrs_from_method);
    LOAD_IL2CPP(custom_attrs_get_attr);
    LOAD_IL2CPP(custom_attrs_has_attr);
    LOAD_IL2CPP(custom_attrs_construct);
    LOAD_IL2CPP(custom_attrs_free);

    // MANUALLY DEFINED CONST DEFINITIONS
    GET_POINTER(class_get_type_const) = GET_POINTER(class_get_type);
    GET_POINTER(class_get_name_const) = GET_POINTER(class_get_name);

    dlclose(imagehandle);
    initialized = true;
    Logger.info("il2cpp_functions: Init: Successfully loaded all il2cpp functions!");
    usleep(100000L);
}
